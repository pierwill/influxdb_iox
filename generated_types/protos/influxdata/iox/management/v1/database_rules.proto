syntax = "proto3";
package influxdata.iox.management.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "influxdata/iox/management/v1/base_types.proto";
import "influxdata/iox/management/v1/shard.proto";

// `PartitionTemplate` is used to compute the partition key of each row that
// gets written. It can consist of the table name, a column name and its value,
// a formatted time, or a string column and regex captures of its value. For
// columns that do not appear in the input row, a blank value is output.
//
// The key is constructed in order of the template parts; thus ordering changes
// what partition key is generated.
message PartitionTemplate {
  message Part {
    message ColumnFormat {
      string column = 1;
      string format = 2;
    }

    oneof part {
      google.protobuf.Empty table = 1;
      string column = 2;
      string time = 3;
      ColumnFormat regex = 4;
      ColumnFormat strf_time = 5;
    }
  }

  repeated Part parts = 1;
}

message LifecycleRules {
  message SortOrder {
    message ColumnSort {
      string column_name = 1;
      ColumnType column_type = 2;
      Aggregate column_value = 3;
    }

    // Sort by this order
    Order order = 1;

    // Configure sort key
    oneof sort {
      // The last time the item received a write.
      google.protobuf.Empty last_write_time = 2;

      // When the item was created.
      google.protobuf.Empty created_at_time = 3;

      // A column name, its expected type, and whether to use the min or max
      // value. The ColumnType is necessary because the column can appear in
      // any number of tables and be of a different type. This specifies that
      // when sorting j, only columns with the given name and type
      // should be used for the purposes of determining the order.
      //
      // All items are first sorted by created_at_time asc and then stably
      // sorted based on the selected aggregate. If an item doesn't have the
      // given column in any way, it will appear at the beginning of the list.
      ColumnSort column = 4;
    }
  }

  // A chunk of data within a partition that has been cold for writes for this
  // many seconds will be frozen and compacted (moved to the read buffer)
  // if the chunk is older than mutable_min_lifetime_seconds
  //
  // Represents the chunk transition open -> moving and closed -> moving
  uint32 mutable_linger_seconds = 1;

  // A chunk of data within a partition is guaranteed to remain mutable
  // for at least this number of seconds unless it exceeds the mutable_size_threshold
  uint32 mutable_minimum_age_seconds = 2;

  // Once a chunk of data within a partition reaches this number of bytes
  // writes outside its keyspace will be directed to a new chunk and this
  // chunk will be compacted to the read buffer as soon as possible
  uint64 mutable_size_threshold = 3;

  // Once the total amount of buffered data in memory reaches this size start
  // dropping data from memory based on the drop_order
  uint64 buffer_size_soft = 4;

  // Once the amount of data in memory reaches this size start
  // rejecting writes
  uint64 buffer_size_hard = 5;

  // Configure order to transition data
  //
  // In the case of multiple candidates, data will be
  // compacted, persisted and dropped in this order
  SortOrder sort_order = 6;

  // Allow dropping data that has not been persisted to object storage
  // once the database size has exceeded the configured limits
  bool drop_non_persisted = 7;

  // Persists chunks to object storage.
  bool persist = 9;

  // Do not allow writing new data to this database
  bool immutable = 8;

  // If the background worker doesn't find any work to do it will
  // sleep for this many milliseconds before looking again
  //
  // If 0, the default backoff is used
  // See server::db::lifecycle::DEFAULT_LIFECYCLE_BACKOFF
  uint64 worker_backoff_millis = 10;
}

message DatabaseRules {
  // The unencoded name of the database
  string name = 1;

  // Template that generates a partition key for each row inserted into the database
  PartitionTemplate partition_template = 2;

  // Configures how data flows through the system
  LifecycleRules lifecycle_rules = 3;

  // Shard  config
  ShardConfig shard_config = 8;
}
