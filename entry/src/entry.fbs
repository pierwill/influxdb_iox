namespace influxdata.iox.write.v1;

// Every modification to a database is represented as an entry. These can be forwarded
// on to other IOx servers or to Kafka.

// An entry can only be one of these Operation types
union Operation {
  write: WriteOperations,
  delete: DeleteOperations,
}

table WriteOperations {
  // A collection of partition writes. A given partition will have at most one
  // write in this collection.
  partition_writes: [PartitionWrite];
}

table DeleteOperations {
  // A collection of deletes. Each delete targets a single table, with each table
  // having no more than one delete. Deletes can span partitions because they
  // only have a predicate and do not target any specific partition.
  deletes: [Delete];
}

table Entry {
  operation: Operation;
}

// A write to a  partition. If the IOx server creating this PartitionWrite has
// no rules for generating partition keys, the key will be null, representing
// the empty string.
table PartitionWrite {
  key: string;
  table_batches: [TableWriteBatch];
}

// A delete from a single table with a predicate. Deletes can span partitions since
// they're concerned with data that has already been written. Partitioning is a way
// to split up writes as they land.
table Delete {
  table_name: string;
  predicate: string;
}

// A collection of rows in a table in column oriented representation
table TableWriteBatch {
  name: string;
  // every column must have the same number of bytes in its null_mask. They also must
  // have the same number of rows n such that for each column c:
  // c.values().len() + count_ones(null_mask) = n
  columns: [Column];
}

enum LogicalColumnType : byte { IOx, Tag, Field, Time }

union ColumnValues {
  I64Values,
  F64Values,
  U64Values,
  StringValues,
  BoolValues,
  BytesValues,
}

table Column {
  name: string;
  // this keeps a mapping of what kind of InfluxDB or IOx type this column came from
  logical_column_type: LogicalColumnType;
  // the set of non-null values for this column. Their position in this array does not
  // map to their row position in the batch. The bitmask must be used to map the row
  // position to the position in this array.
  values: ColumnValues;
  // mask that maps the position to if that value is null. Null positions will
  // not have a value represented in the values array. To read the values out of the
  // column requires traversing the mask to determine what position in the values
  // array that index is located in. Here's what it might look like:
  //    position:   0      8  9                 24
  //         bit:   00100011  00111000   00000001
  // An on bit (1) indicates that the value at that position is null. If there are
  // no null values in the column, the null_mask is omitted from the flatbuffers.
  null_mask: [ubyte];
}

table I64Values {
  values: [int64];
}

table F64Values {
  values: [float64];
}

table U64Values {
  values: [uint64];
}

table StringValues {
  values: [string];
}

table BoolValues {
  values: [bool];
}

table BytesValues {
  values: [BytesValue];
}

table BytesValue {
  data: [ubyte];
}
